buildscript {
  ext {
    spring = "2.6.2"
    boot = "org.springframework.boot"
    lombok = "org.projectlombok:lombok"
  }
  repositories {
    mavenCentral()
    maven {url "https://plugins.gradle.org/m2/"}
  }
  dependencies {
    classpath("$boot:spring-boot-gradle-plugin:$spring")
    classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
  }
}

allprojects {
  group = "com.jws"
  version = "1.0.0"
}

subprojects {
  apply plugin: "java"
  apply plugin: "org.springframework.boot"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "idea"
  apply plugin: "com.ewerk.gradle.plugins.querydsl"

  sourceCompatibility = targetCompatibility = 8

  repositories {
    mavenCentral()
  }

  configurations {
    developmentOnly
    runtimeClasspath {
      extendsFrom developmentOnly
    }
  }

  dependencies {
    developmentOnly("$boot:spring-boot-devtools")
    implementation 'com.fasterxml.jackson.core:jackson-annotations'

    implementation "$boot:spring-boot-starter-data-jpa"
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'

    compileOnly lombok
    testCompileOnly lombok
    annotationProcessor lombok
    testAnnotationProcessor lombok

    testImplementation "$boot:spring-boot-starter-test"
  }

  test {
    useJUnitPlatform()
  }

}

////querydsl 추가
//def querydslDir = "$buildDir/generated/querydsl"
//
//querydsl {
//  library = "com.querydsl:querydsl-apt"
//  jpa = true
//  querydslSourcesDir = querydslDir
//}
//
//sourceSets {
//  main {
//    java {
//      srcDirs = ['src/main/java', querydslDir]
//    }
//  }
//}
//
//compileQuerydsl {
//  options.annotationProcessorPath = configurations.querydsl
//}
//
//project.afterEvaluate {
//  project.tasks.compileQuerydsl.options.compilerArgs = [
//          "-proc:only",
//          "-processor", project.querydsl.processors() +
//                  ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
//  ]
//}


["module"].each {
  def subProjectDir = new File(projectDir, it)
  subProjectDir.eachDir {dir ->
    def projectName = ":${it}-${dir.name}"
    project(projectName) {
      bootJar.enabled(false)
      jar.enabled(true)
    }
  }
}
["server"].each {
  def subProjectDir = new File(projectDir, it)
  subProjectDir.eachDir {dir ->
    def projectName = ":${it}-${dir.name}"
    project(projectName) {

    }
  }
}

help.enabled(false)
